{# USES_VARIABLES { Cm, dt, v, N,
                  ab_star0, ab_star1, ab_star2, b_plus,
                  ab_plus0, ab_plus1, ab_plus2, b_minus,
                  ab_minus0, ab_minus1, ab_minus2, v_star, u_plus, u_minus,
                  _P, _B, _morph_i, _morph_parent_i, _starts, _ends,
                  _invr0, _invrn} #}
{# ITERATE_ALL { _idx } #}

'''
Solves the cable equation (spatial diffusion of currents).
This is where most time-consuming time computations are done.
'''
from numpy.linalg import solve
from numpy import zeros

# scalar code
_vectorisation_idx = 1
{{scalar_code|autoindent}}

# vector code
_vectorisation_idx = N
{{vector_code|autoindent}}

c = zeros(N)
ab = zeros((3, N))
_gtot_all = zeros(N)
_gtot_all[:] = _gtot
b = -({{Cm}} / dt*{{v}}) - _I0

# Tridiagonal solving
# Pass 1
for i in range(N):
    {{v_star}}[i] = b[i]  # RHS -> v_star (solution)
    bi = {{ab_star1}}[i] - _gtot_all[i]  # main diagonal
    if i < N-1:
        c[i] = {{ab_star0}}[i+1]  # superdiagonal
    if i>0:
        ai = {{ab_star2}}[i-1]  # subdiagonal
        _m = 1.0/(bi-ai*c[i-1])
        c[i] = c[i]*_m
        {{v_star}}[i] = ({{v_star}}[i] - ai*{{v_star}}[i-1])*_m
    else:
        c[0]=c[0]/bi
        {{v_star}}[0]={{v_star}}[0]/bi

for i in range(N-2, -1, -1):
    {{v_star}}[i] = {{v_star}}[i] - c[i]*{{v_star}}[i+1]

# Pass 2
for i in range(N):
    {{u_plus}}[i] = {{b_plus}}[i]  # RHS -> v_star (solution)
    bi = {{ab_plus1}}[i] - _gtot_all[i]  # main diagonal
    if i < N-1:
        c[i] = {{ab_plus0}}[i+1]  # superdiagonal
    if (i>0):
        ai = {{ab_plus2}}[i-1]  # subdiagonal
        _m = 1.0/(bi-ai*c[i-1])
        c[i] = c[i]*_m
        {{u_plus}}[i] = ({{u_plus}}[i] - ai*{{u_plus}}[i-1])*_m
    else:
        c[0] = c[0]/bi
        {{u_plus}}[0] = {{u_plus}}[0]/bi

for i in range(N-2, -1, -1):
    {{u_plus}}[i]={{u_plus}}[i] - c[i]*{{u_plus}}[i+1];

# Pass 3
for i in range(N):
    {{u_minus}}[i] = {{b_minus}}[i]  # RHS -> v_star (solution)
    bi = {{ab_minus1}}[i] - _gtot_all[i]  # main diagonal
    if i < N-1:
        c[i] = {{ab_minus0}}[i+1]  # superdiagonal
    if i > 0:
        ai = {{ab_minus2}}[i-1]  # subdiagonal
        _m = 1.0/(bi-ai*c[i-1]);
        c[i] = c[i]*_m
        {{u_minus}}[i] = ({{u_minus}}[i] - ai*{{u_minus}}[i-1])*_m
    else:
        c[0] = c[0]/bi
        {{u_minus}}[0] = {{u_minus}}[0]/bi

for i in range(N-2, -1, -1):
    {{u_minus}}[i] = {{u_minus}}[i] - c[i]*{{u_minus}}[i+1]

# Prepare matrix for solving the linear system
_n_segments = len({{_B}})
{{_B}}[:] = 0
{{_P}}[:] = 0
for _i, _i_parent, _first, _last, _invr0, _invrn in zip({{_morph_i}},
                                                         {{_morph_parent_i}},
                                                         {{_starts}},
                                                         {{_ends}},
                                                         {{_invr0}},
                                                         {{_invrn}}):
    # Towards parent
    if _i == 1:  # first branch, sealed end
        {{_P}}[0] = {{u_minus}}[_first] - 1
        {{_P}}[0 + 1] = {{u_plus}}[_first]
        {{_B}}[0] = -{{v_star}}[_first]
    else:
        {{_P}}[_i_parent*_n_segments + _i_parent] += (1 - {{u_minus}}[_first]) * _invr0
        {{_P}}[_i_parent*_n_segments + _i] -= {{u_plus}}[_first] * _invr0
        {{_B}}[_i_parent] += {{v_star}}[_first] * _invr0
    # Towards children
    {{_P}}[_i*_n_segments + _i] = (1 - {{u_plus}}[_last]) * _invrn
    {{_P}}[_i*_n_segments + _i_parent] = -{{u_minus}}[_last] * _invrn
    {{_B}}[_i] = {{v_star}}[_last] * _invrn

# Solve the linear system
_V = solve({{_P}}.reshape((_n_segments, _n_segments)), {{_B}})

# Final solutions as linear combinations
for _i, _i_parent, _first, _last, in zip({{_morph_i}},
                                          {{_morph_parent_i}},
                                          {{_starts}},
                                          {{_ends}}):
    # _last+1 can go beyond the last element, but in Python slicing syntax, this
    # is ignored.
    {{v}}[_first:_last+1] = ({{v_star}}[_first:_last+1]
                                     + _V[_i_parent] * {{u_minus}}[_first:_last+1]
                                     + _V[_i] * {{u_plus}}[_first:_last+1])
